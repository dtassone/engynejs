{"name":"EngyneJs","tagline":"Be fluent in selenium testing!","body":"Fluent api built to create acceptance tests.\r\n\r\nIt is based on selenium-webdriver and execute every tasks in the control flows.\r\n\r\nMore info https://code.google.com/p/selenium/wiki/WebDriverJs#Control_Flows\r\n\r\nIt is also using chai utils method which allows to add chainable methods or properties.\r\n\r\nhttps://github.com/chaijs/chai/tree/master/lib/chai/utils\r\n\r\nThe /runner class builds the client api and start a local selenium webserver in child process.\r\nConfiguration properties available in /config.properties\r\nAll this properties are overridable by passing an object options in the Runner constructor.\r\n\r\n##It requires the following files\r\n\r\n- selenium-server-standalone-2.40.0.jar - http://docs.seleniumhq.org/download/\r\n- chromedriver.exe - https://code.google.com/p/selenium/wiki/ChromeDriver\r\n- phantomjs.exe - http://phantomjs.org/download.html\r\n\r\n\r\n###Require the runner object\r\nThe Runner object allows to configure the selenium server and the selenium webdriver used behind the client api.\r\n\r\n    var conf = {\r\n        \"browser\" : \"chrome\"\r\n        , \"seleniumJarPath\": \"c:\\\\...\\\\resources\\\\selenium-server-standalone-2.40.0.jar\"\r\n        , \"phantomExecutable\": \"c:\\\\...\\\\resources\\\\phantomjs.exe\"\r\n        , \"screenshotFailedTest\": true\r\n    };\r\n\r\n    require(\"am-webdriver/runner\").setConfig(conf);\r\n\r\n##API\r\n\r\n###Require the client object\r\nGet a singleton instance of the client object\r\n\r\n    var client = require(\"am-webdriver\").client;\r\n\r\n####Using the factory\r\nYou can get a singleton instance\r\n\r\n    var factory = require(\"am-webdriver\").factory;\r\n    var client = factory.getInstance();\r\n    //OR\r\n    var client = factory.getClient();\r\n\r\nYou can also get a new instance. Please note that you will need to reinstall your custom commands...\r\n\r\n    var factory = require(\"am-webdriver\").factory;\r\n    var client = factory.newInstance();\r\n    //OR\r\n    var client = factory.newClient();\r\n\r\n\r\n###Commands\r\n\r\n#### click()\r\ntrigger the click event on an element.\r\nie.\r\n\r\n    client.click(\".my-css-selector\")\r\n    client.element(\".my-css-selector\").click()\r\n\r\n\r\n#### clickText(...)\r\nSearch for argument text on the page and trigger a click on the element containing it\r\n\r\n    client.clickText(\"homepage\")\r\n\r\n####close()\r\nclose the driver and the browser window\r\n\r\n    client.close()\r\n\r\n\r\n####element(...)\r\nfind and select the first element matching the selector\r\n\r\n    client.element(\"my-selector\")\r\n\r\n####attribute(...)\r\nAlias: attr\r\nGet the attribute value of a pre selected element\r\n\r\n    client.element(\"my-selector\").attribute(\"style\")\r\n\r\n####hover()\r\ntrigger the mouseover event on an element\r\n\r\n    client.element(\".button-ok\").hover();\r\n\r\n####elements(...)\r\nfind a collection of elements matching the selector\r\nUsed in combination with the index command, first or last property\r\n\r\n    client.elements(\"my-selector\")\r\n\r\n    client.elements(\"my-grid-rows\").index(0)\r\n    client.elements(\"my-grid-rows\").first\r\n\r\n####index(n)\r\nselect the element n of a pre selected collection of element\r\n\r\n    client.elements(\"my-grid-rows\").index(0)\r\n\r\n####open(...)\r\nopen a url in the browser\r\n\r\n    client.open(\"http://google.com\")\r\n\r\n####sleep(n)\r\nAlias: pause(n)\r\npause the driver process for n ms\r\n\r\n    client.sleep(1000)\r\n\r\n####pressKey(...)\r\ntriggers a special key press, ENTER TAB CTRL... to test keyboard navigation\r\n\r\n        client.pressKey(\"TAB\")\r\n\r\n\r\n####find(...)\r\nsearch for a collection of element within one element.\r\n\r\n    client.element(\"my-grid-container\").find(\".row\")\r\n\r\n####select(...)\r\nsearch for a sub element within one element.\r\n\r\n    client.element(\"my-grid-container\").select(\".row:first\")\r\n\r\n####selectText(...)\r\nsearch for a sub element by its content text within one element.\r\n\r\n    client.element(\"button\").selectText(\"Cancel\")\r\n\r\n####then(callback)\r\nexecute a custom callback in the flow\r\n\r\n    client.then(breakStreamingConnection)\r\n\r\n####type(...)\r\ntype a text within an input field\r\n\r\n    client.element(\"input.description\").type(\"am-webdriver is cool!\")\r\n\r\n\r\n####wait(selector, n)\r\npause the control flow until the css selector is found, and timeout if not found.\r\n\r\n    client.open(\"http://google.com\").wait(\"input.search\", 10000)\r\n\r\n####screenshot()\r\ntake a screenshot of the current page\r\n\r\n    client.open(\"http://google.com\").screenshot()\r\n\r\n####global(...)\r\npre load a window property that may be used in assertion\r\n\r\n####Asserts are commands used to test the property of an element\r\n\r\n####contains(...)\r\nAlias:  contain, include\r\nCheck is the pre stated property include the exected value\r\n\r\n    client.element(\"input\").cssClass.contains(\"error\");\r\n\r\n####equal(...)\r\nCheck is the pre stated property strictly equal the expected value\r\n\r\n    client.element(\"title\").text.equal(\"Hello World!\");\r\n\r\n\r\n####below(n)\r\nCheck is the pre stated property is below n (operator used is <)\r\n\r\n    client.elements(\"li\").length.should.be.below(10);\r\n\r\n####above(n)\r\nCheck is the pre stated property is above n (operator used is >)\r\n\r\n    client.elements(\"li\").length.should.be.above(10);\r\n\r\n####least(n)\r\nCheck is the pre stated property is at least n (operator used is >=)\r\n\r\n    client.elements(\"li\").length.should.be.at.least(1);\r\n\r\n####most(n)\r\nCheck is the pre stated property is at most n (operator used is <=)\r\n\r\n    client.elements(\"li\").length.should.be.at.most(10);\r\n\r\n####startWith(...)\r\nCheck is the pre stated property starts with string\r\n\r\n    client.element(\"title\").text.should.startWith(\"Hello\");\r\n\r\n####endWith(...)\r\nCheck is the pre stated property ends with string\r\n\r\n    client.element(\"title\").text.should.endWith(\"World!\");\r\n\r\n###Properties\r\n\r\n####activeElement\r\nReturns the currently focused element, that is, the element that will get keystroke events if the user types any.\r\n\r\n    client.activeElement.cssClass.should.contain(\"field-whatever\");\r\n\r\n####parent\r\nSelect the parent element of the pre selected element\r\n\r\n    client.element(\"li:first\").parent.cssClass.should.contain(\"list-wrapper\");\r\n\r\n####cssClass\r\nReturns the class attribute value of an element\r\n\r\n    client.element(\".title\").cssClass.should.equal(\"title and whatever-other-class applied-on-the-element\");\r\n\r\n####isEnabled\r\nReturns true if the element is enabled and false if not\r\n\r\n    client.element(\".disabled-field\").isEnabled.should.equal(false);\r\n\r\n####inspectedElement\r\nReturns the pre selected element\r\n\r\n    client.element(\"div.that-listen-to-change\")\r\n    //to access it via a property, you shouldn't need to use this property\r\n    client.inspectedElement\r\n\r\n\r\n####first\r\nReturns the first element of a pre selected collection of element\r\n\r\n    client.elements(\"li\").first.text.should.equal(\"first item\");\r\n\r\n####last\r\nReturns the last element of a pre selected collection of element\r\n\r\n    client.elements(\"li\").first.text.should.equal(\"first item\");\r\n\r\n\r\n####length\r\nReturns the number of elements of the pre selected collection of element\r\n\r\n    client.elements(\"li\").length.should.equal(3);\r\n\r\n####text\r\nReturns the content of an element\r\n\r\n    client.element(\".title\").text.should.equal(\"Hello World!\");\r\n\r\n\r\n####value\r\nReturns the value of the value attribute of an element\r\n\r\n    client.element(\"option\").value.should.equal(\"0\");\r\n\r\n####title\r\nReturns the title of the opened window\r\n\r\n    client.open(\"http://google.com\").title.should.equal(\"Google\");\r\n\r\n####not\r\nReverts the assertion. So for example, these 2 statements are equivalent\r\n\r\n    client.elements(\"li\").length.should.be.at.least(10);\r\n    client.elements(\"li\").length.should.not.be.below(10);\r\n\r\n\r\n####expect, to, be, at, and, should\r\nThese are just linking words to make the api more fluent and does not execute any code in the background. Thus these 2 statements are equivalent.\r\n\r\n    client.elements(\"li\").length.should.not.be.below(10);\r\n    client.elements(\"li\").length.not.below(10);\r\n\r\n\r\n##How to extend the API\r\n\r\n####addCommand(name, fn)\r\nAdd a chainable function to the client object.\r\n\r\n    client.addCommand(\"login\", function(username, password){\r\n        return page.open(\"http://whatever.com/login\")\r\n            .wait('input.login')\r\n                .type(username)\r\n                .pressKey(\"TAB\")\r\n                .type(password)\r\n                .click(\".btn-submit\");\r\n    });\r\n\r\nnow you can use login as any other commands in your api\r\n    client.login(\"admin\", \"password\")\r\n          .open(\"/admin\")\r\n          ...\r\n\r\n** Do not forget to return the object **\r\n\r\n\r\n####addProperty(names, fn)\r\nnames: Array of aliases or string\r\nfn: function that will be executed when the property is accessed\r\n\r\nThis method is used by the builder class to add all the properties in the client object. The fn function will be executed in the control flow and the 'this' object binded to the client object.\r\nSo it gives you access to the following properties.\r\n\r\n- this._driver: the native selenium driver\r\n- this._flow: The webdriver.promise.controlFlow() - More info https://code.google.com/p/selenium/wiki/WebDriverJs#Control_Flows\r\n- this._flag: the chai/lib/chai/utils.flag object which allows to keep in memory properties. This object is used to compare values in every assertion statements\r\n\r\n#####This is a core client api method which should be used wisely. It is recommended that you use 'addCommand' to extend the API\r\n\r\n    client.addProperty(\"length\", function(){\r\n        if(!this._flag(\"elements\"))\r\n            return 0;\r\n\r\n        var value = this._flag(\"elements\").length;\r\n\r\n        this._flag(\"actual\", value);\r\n        return value;\r\n    });\r\n\r\n\r\n####addChainableMethod(names, fn)\r\nnames: Array of aliases or string\r\nfn: function that will be executed when the method is invoked\r\n\r\nThis method is used by the builder class to add all the commands in the client object. The fn function will be executed in the control flow and the 'this' object is binded to the client object.\r\nSee add properties for more details.\r\n\r\n#####This is a core client api method which should be used wisely. It is recommended that you use 'addCommand' to extend the API\r\n\r\n    client.addChainableMethod([\"element\", \"findFirstElement\"], function(cssSelector){\r\n        var that = this;\r\n        return this._driver.findElement(By.css(cssSelector)).then(function(el){\r\n            that._flag(\"element\", el);\r\n            return el;\r\n        });\r\n    }\r\n\r\n##How to write tests\r\nChoose your favourite test runner. Jasmine, mocha...\r\n\r\nThen you can chain your api calls as much as you like.\r\n\r\n        it(\"list should allow selection with tab\", function(done){\r\n            page.activeElement.type(\"GBP\")\r\n                .pressKey(\"tab\")\r\n                .cssClass.should.contains(\"btn-swap\")\r\n                .and.element(\"[ccy-pair-input]\").value.should.equal(\"GBPAED\")\r\n                .then(done);\r\n        });\r\n\r\n\r\n####Check the example folder for more example of tests and extensions runnable with mocha\r\n\r\n##TODO\r\n\r\n* Integrate it with BrowserStack\r\n\r\n* Write Unit Tests\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}